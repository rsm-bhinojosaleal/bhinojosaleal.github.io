---
title: "Poisson Regression Examples"
author: "Your Name"
date: today
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
editor_options: 
  chunk_output_type: console
---


## Blueprinty Case Study

### Introduction

Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. unfortunately, such data is not available. 

However, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty's software. The marketing team would like to use this data to make the claim that firms using Blueprinty's software are more successful in getting their patent applications approved.


### Data

_todo: Read in data._

```{python}
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt

df_blueprinty = pd.read_csv('blueprinty.csv')
df_blueprinty

```

_todo: Compare histograms and means of number of patents by customer status. What do you observe?_

```{python}
mean_customers = df_blueprinty[df_blueprinty['iscustomer'] == 1]['patents'].mean()
mean_non_customers = df_blueprinty[df_blueprinty['iscustomer'] == 0]['patents'].mean()
print("Mean patents for customers:", mean_customers)
print("Mean patents for non-customers:", mean_non_customers)

import matplotlib.pyplot as plt
fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 6), sharey=True)

# Customers
df_blueprinty[df_blueprinty['iscustomer'] == 1]['patents'].hist(ax=axs[0], bins=20, color='blue', alpha=0.7)
axs[0].set_title('Histogram of Patents (Customers)')
axs[0].set_xlabel('Number of Patents')
axs[0].set_ylabel('Frequency')

# Non-Customers
df_blueprinty[df_blueprinty['iscustomer'] == 0]['patents'].hist(ax=axs[1], bins=20, color='red', alpha=0.7)
axs[1].set_title('Histogram of Patents (Non-Customers)')
axs[1].set_xlabel('Number of Patents')

# Show the plot
plt.tight_layout()
plt.show()


total_patents = df_blueprinty.groupby('iscustomer')['patents'].sum()

total_patents.plot(kind='bar', color=['red', 'blue'])
plt.title('Total Number of Patents by Customer Status')
plt.xlabel('Customer Status (0 = Non-Customers, 1 = Customers)')
plt.ylabel('Total Patents')
plt.xticks(ticks=[0, 1], labels=['Non-Customers', 'Customers'], rotation=0)  
plt.show()


# Based on the visualizations it is clear that there are a lot more patents for non customers as well lie on 3 patents vs the customers whose distribution is along the 4 patents as a mean which is validated by the means calculated.
```

Blueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.

_todo: Compare regions and ages by customer status. What do you observe?_

```{python}
age_by_region_customer = df_blueprinty.groupby(['region', 'iscustomer'])['age'].mean().unstack()

# Bar chart to compare average ages in each region by customer status
age_by_region_customer.plot(kind='bar', figsize=(10, 6))
plt.title('Average Age by Region and Customer Status')
plt.xlabel('Region')
plt.ylabel('Average Age')
plt.xticks(rotation=45)
plt.legend(title='Customer Status', labels=['Non-Customers', 'Customers'])
plt.show()

#In all regions the non customers have  a higher age to the customers with northwest having the most difference.

customer_count_by_region = df_blueprinty.groupby(['region', 'iscustomer']).size().unstack()

# Plotting the results
customer_count_by_region.plot(kind='bar', figsize=(10, 6))
plt.title('Customer Count by Region')
plt.xlabel('Region')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.legend(title='Customer Status', labels=['Non-Customers', 'Customers'])
plt.show()

#For the amount of customers no customers in each region it is clear that the most promising region is northeast as it has the most customers but also non customers.

```

### Estimation of Simple Poisson Model

Since our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.

_todo: Write down mathematically the likelihood for_ $Y \sim \text{Poisson}(\lambda)$. Note that $f(Y|\lambda) = e^{-\lambda}\lambda^Y/Y!$.

_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_

```
poisson_loglikelihood <- function(lambda, Y){
   ...
}
```

_todo: Use your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y)._

_todo: If you're feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which "feels right" because the mean of a Poisson distribution is lambda._

_todo: Find the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python._


### Estimation of Poisson Regression Model

Next, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i = \text{Poisson}(\lambda_i)$ where $\lambda_i = \exp(X_i'\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.

_todo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g() to be exp() so that_ $\lambda_i = e^{X_i'\beta}$. _For example:_

```
poisson_regression_likelihood <- function(beta, Y, X){
   ...
}
```

_todo: Use your function along with R's optim() or Python's sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1's to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors._

_todo: Check your results using R's glm() function or Python sm.GLM() function._

_todo: Interpret the results. What do you conclude about the effect of Blueprinty's software on patent success?_




## AirBnB Case Study

### Introduction

AirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City.  The data include the following variables:

:::: {.callout-note collapse="true"}
### Variable Definitions

    - `id` = unique ID number for each unit
    - `last_scraped` = date when information scraped
    - `host_since` = date when host first listed the unit on Airbnb
    - `days` = `last_scraped` - `host_since` = number of days the unit has been listed
    - `room_type` = Entire home/apt., Private room, or Shared room
    - `bathrooms` = number of bathrooms
    - `bedrooms` = number of bedrooms
    - `price` = price per night (dollars)
    - `number_of_reviews` = number of reviews for the unit on Airbnb
    - `review_scores_cleanliness` = a cleanliness score from reviews (1-10)
    - `review_scores_location` = a "quality of location" score from reviews (1-10)
    - `review_scores_value` = a "quality of value" score from reviews (1-10)
    - `instant_bookable` = "t" if instantly bookable, "f" if not

::::


_todo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided._





